import io, time
from .. import loader, utils
from PIL import Image
from telethon import TelegramClient
from telethon.tl.patched import Message
from telethon.errors import ChatAdminRequiredError, UserAdminInvalidError, PhotoCropSizeSmallError
from telethon.tl.types import ChatAdminRights, ChatBannedRights
from telethon.tl.functions.channels import EditAdminRequest, EditBannedRequest, EditPhotoRequest, DeleteUserHistoryRequest
from telethon.tl.functions.messages import EditChatAdminRequest

# ================== –ö–û–ù–°–¢–ê–ù–¢–´ ========================

DEMOTE_RIGHTS = ChatAdminRights(post_messages=None,
                                add_admins=None,
                                invite_users=None,
                                change_info=None,
                                ban_users=None,
                                delete_messages=None,
                                pin_messages=None,
                                edit_messages=None)

UNMUTE_RIGHTS = ChatBannedRights(until_date=None,
                                 view_messages=None,
                                 send_messages=False,
                                 send_media=False,
                                 send_stickers=False,
                                 send_gifs=False,
                                 send_games=False,
                                 send_inline=False,
                                 embed_links=False)

BANNED_RIGHTS = ChatBannedRights(until_date=None,
                                 view_messages=True,
                                 send_messages=True,
                                 send_media=True,
                                 send_stickers=True,
                                 send_gifs=True,
                                 send_games=True,
                                 send_inline=True,
                                 embed_links=True)

UNBAN_RIGHTS = ChatBannedRights(until_date=None,
                                view_messages=None,
                                send_messages=None,
                                send_media=None,
                                send_stickers=None,
                                send_gifs=None,
                                send_games=None,
                                send_inline=None,
                                embed_links=None)

# =====================================================

@loader.tds
class RakenMod(loader.Module):
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã. –°–ø–∏–∑–∂–µ–Ω–æ —É @ftgmodulesbyfl1yd"""
    strings = {'name': 'RakenAdminMod',
               'no_reply': '<b>‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä</b>',
               'not_pic': '<b>‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä</b>',
               'wait': '<b>‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</b>',
               'pic_so_small': '<b>‚ùå –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è!</b>',
               'pic_changed': '<b> –ê–≤–∞—Ç–∞—Ä–∫–∞ —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>',
               'promote_none': '<b>‚ùå –ù–µ–∫–æ–≥–æ –ø–æ–≤—ã—à–∞—Ç—å</b>',
               'who': '<b>‚ùå –ï—â–µ –æ–¥–∏–Ω –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥—Ä—É–≥. –ó–∞–≤—è–∑—ã–≤–∞–π —Å —ç—Ç–∏–º.</b>',
               'not_admin': '<b> ‚ùå –ò–¥–∏ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–∞—Ç—å –∞–¥–º–∏–Ω–∫—É. –£ —Ç–µ–±—è –µ–µ –∑–¥–µ—Å—å –Ω–µ—Ç.</b>',
               'promoted': '<b>‚úÖ {} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!\n–ï–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å: {}</b>',
               'wtf_is_it': '<b>‚ùå –ß—Ç–æ —ç—Ç–æ?</b>',
               'this_isn`t_a_chat': '<b>‚ùå –≠—Ç–æ –Ω–µ —á–∞—Ç.</b>',
               'demote_none': '<b>‚ùå –ù–µ–∫–æ–≥–æ –ø–æ–Ω–∏–∂–∞—Ç—å.</b>',
               'demoted': '<b>‚úÖ{} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω!</b>',
               'pinning': '<b>‚úÖ –ó–∞–∫—Ä–µ–ø–ª—è–µ–º...</b>',
               'pin_none': '<b>‚ùå –†–µ–ø–ª–∞–π –¥–ª—è –∫–æ–≥–æ —Å–¥–µ–ª–∞–ª–∏, –∞?</b>',
               'unpinning': ' <b>‚úÖ –û—Ç–∫—Ä–µ–ø–ª—è–µ–º...</b>',
               'unpin_none': '<b>‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–∫—Ä–µ–ø–ª—è—Ç—å.</b>',
               'no_rights': '<b>‚ùå –ò–¥–∏ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–∞—Ç—å –∞–¥–º–∏–Ω–∫—É. –£ —Ç–µ–±—è –µ–µ –∑–¥–µ—Å—å –Ω–µ—Ç.</b>',
               'pinned': '<b>‚úÖ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>',
               'unpinned': '<b>‚úÖ –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>',
               'can`t_kick': '<b>‚ùå –û–Ω –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π</b>',
               'kicking': '<b>‚úÖ –ö–∏–∫–∞–µ–º...</b>',
               'kick_none': '<b>‚ùå –ï—â–µ –æ–¥–∏–Ω –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥—Ä—É–≥. –ó–∞–≤—è–∑—ã–≤–∞–π —Å —ç—Ç–∏–º.</b>',
               'kicked': '<b>‚úÖ {} –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞</b>',
               'kicked_for_reason': '<b>‚úÖ {} –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞. \nüìÉ –ü—Ä–∏—á–∏–Ω–∞: {}</b>',
               'banning': '<b>‚úÖ –ë–∞–Ω–∏–º...</b>',
               'banned': '<b>‚úÖ {} –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ!</b>',
               'banned_for_reason': '<b>‚úÖ {} –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ! \n‚ùï –ü—Ä–∏—á–∏–Ω–∞: {} {}</b>', 
               'ban_none': '<b>‚ùå –ï—â–µ –æ–¥–∏–Ω –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥—Ä—É–≥. –ó–∞–≤—è–∑—ã–≤–∞–π —Å —ç—Ç–∏–º.</b>',
               'unban_none': '<b>‚ùå –ï—â–µ –æ–¥–∏–Ω –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥—Ä—É–≥. –ó–∞–≤—è–∑—ã–≤–∞–π —Å —ç—Ç–∏–º.</b>',
               'unbanned': '<b>‚úÖ {} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ! –¢–µ–ø–µ—Ä—å –æ–Ω —Å–Ω–æ–≤–∞ —Å–º–æ–∂–µ—Ç –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!</b>',
               'mute_none': '<b>‚ùå –ï—â–µ –æ–¥–∏–Ω –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥—Ä—É–≥. –ó–∞–≤—è–∑—ã–≤–∞–π —Å —ç—Ç–∏–º.</b>',
               'muted': '<b>‚úÖ {} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ </b>',
               'no_args': '<b>‚ùå –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã.</b>',
               'unmute_none': '<b>‚ùå –ï—â–µ –æ–¥–∏–Ω –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥—Ä—É–≥. –ó–∞–≤—è–∑—ã–≤–∞–π —Å —ç—Ç–∏–º.</b>',
               'unmuted': '<b>‚úÖ{} —Ä–∞–∑–º—å—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω —Å–Ω–æ–≤–∞ —Å–º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å!</b>',
               'no_reply': '<b>‚ùå –†–µ–ø–ª–∞–π –¥–ª—è –∫–æ–≥–æ —Å–¥–µ–ª–∞–ª–∏, –∞?</b>',
               'deleting': '<b>‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ...</b>',
               'no_args_or_reply':'<b>‚ùå –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è.</b>',
               'deleted': '<b>‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {} —É–¥–∞–ª–µ–Ω—ã.</b>',
               'del_u_search': '<b>‚úÖ –ü–æ–∏—Å–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</b>',
               'del_u_kicking': '<b>‚úÖ –ö–∏–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</b>'}


    async def client_ready(self, db, client: TelegramClient):
        self.db = db


    async def setpiccmd(self, message):
        """.setpic {—Ä–µ–ø–ª–∞–π –Ω–∞ —Å—Ç–∏–∫–µ—Ä/—Ñ–æ—Ç–æ} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä/—Ñ–æ—Ç–æ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä–∫—É —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
        if message.chat:
            try:
                reply = await message.get_reply_message()
                
                chat = await message.get_chat()
                if not chat.admin_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                
                if reply:
                    pic = await check_media(message, reply)
                    if not pic:
                        return await utils.answer(message, self.strings('not_pic', message))
                else:
                    return await utils.answer(message, self.strings('no_reply', message))
                
                await utils.answer(message, self.strings('wait', message))
                
                what = resizepic(pic)
                if what:
                    try:
                        await message.client(EditPhotoRequest(message.chat_id, await message.client.upload_file(what)))
                    except PhotoCropSizeSmallError:
                        return await utils.answer(message, self.strings('pic_so_small', message))
                await utils.answer(message, self.strings('pic_changed', message))
            except ChatAdminRequiredError:
                return await utils.answer(message, self.strings('no_rights', message))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def promotecmd(self, message):
        """.promote {—Ä–µ–ø–ª–∞–π} {–ø—Ä–µ—Ñ–∏–∫—Å/–Ω–∏—á–µ–≥–æ} - –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if message.chat:
            try:
                args = utils.get_args_raw(message).split(' ')
                reply = await message.get_reply_message()
                rank = '—Ä–∞–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω'
                
                chat = await message.get_chat()
                adm_rights = chat.admin_rights 
                if not adm_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                
                if reply:
                    args = utils.get_args_raw(message)
                    if args: rank = args
                    else: rank = rank
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    user = await message.client.get_entity(args[0] if not args[0].isnumeric() else int(args[0]))
                    if len(args) == 1:
                        rank = rank
                    elif len(args) >= 2:
                        rank = utils.get_args_raw(message).split(' ', 1)[1]
                try:
                    await message.client(EditAdminRequest(message.chat_id, user.id, ChatAdminRights(add_admins=False, invite_users=adm_rights.invite_users,
                                                                                                    change_info=False, ban_users=adm_rights.ban_users,
                                                                                                    delete_messages=adm_rights.delete_messages, pin_messages=adm_rights.pin_messages), rank))
                except ChatAdminRequiredError:
                    return await utils.answer(message, self.strings('no_rights', message))
                else:
                    return await utils.answer(message, self.strings('promoted', message).format(user.first_name, rank))
            except ValueError:
                return await utils.answer(message, self.strings('no_args', message))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def demotecmd(self, message):
        """.demote {—Ä–µ–ø–ª–∞–π} - –ø–æ–Ω–∏–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not message.is_private:
            try:
                reply = await message.get_reply_message()
                
                chat = await message.get_chat()
                if not chat.admin_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    args = utils.get_args_raw(message)
                    if not args:
                        return await utils.answer(message, self.strings('demote_none', message))
                    user = await message.client.get_entity(args if not args.isnumeric() else int(args))
                
                try:
                    if message.is_channel:
                        await message.client(EditAdminRequest(message.chat_id, user.id, DEMOTE_RIGHTS, ""))
                    else:
                        await message.client(EditChatAdminRequest(message.chat_id, user.id, False))
                except ChatAdminRequiredError:
                    return await utils.answer(message, self.strings('no_rights', message))
                else:
                    return await utils.answer(message, self.strings('demoted', message).format(user.first_name))
            except ValueError:
                return await utils.answer(message, self.strings('no_args'))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def pincmd(self, message):
        """.pin {—Ä–µ–ø–ª–∞–π} - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not message.is_private:
            reply = await message.get_reply_message()
            if not reply:
                return await utils.answer(message, self.strings('pin_none', message))
            
            await utils.answer(message, self.strings('pinning', message))
            try:
                await message.client.pin_message(message.chat, message=reply.id, notify=False)
            except ChatAdminRequiredError:
                return await utils.answer(message, self.strings('no_rights', message))
            await utils.answer(message, self.strings('pinned', message))
        else:
            await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def unpincmd(self, message):
        """.unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        if not message.is_private:
            await utils.answer(message, self.strings('unpinning', message))
            
            try:
                await message.client.pin_message(message.chat, message=None, notify=None)
            except ChatAdminRequiredError:
                return await utils.answer(message, self.strings('no_rights', message))
            await utils.answer(message, self.strings('unpinned', message))
        else:
            await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def kickcmd(self, message):
        """.kick {—Ä–µ–ø–ª–∞–π} {–ø—Ä–∏—á–∏–Ω–∞} - –∫–∏–∫–∞–µ—Ç (–ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç, –Ω–µ –±–∞–Ω–∏—Ç!) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_private:
            try:
                args = utils.get_args_raw(message).split(' ')
                reason = utils.get_args_raw(message)
                reply = await message.get_reply_message()
                
                chat = await message.get_chat()
                if not chat.admin_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                else:
                    if chat.admin_rights.ban_users == False:
                        return await utils.answer(message, self.strings('no_rights', message))
                
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                    args = utils.get_args_raw(message)
                    if args:
                        reason = args
                else:
                    user = await message.client.get_entity(args[0] if not args[0].isnumeric() else int(args[0]))
                    if args:
                        if len(args) == 1:
                            args = utils.get_args_raw(message)
                            user = await message.client.get_entity(args if not args.isnumeric() else int(args))
                            reason = False
                        elif len(args) >= 2:
                            reason = utils.get_args_raw(message).split(' ', 1)[1]
                
                await utils.answer(message, self.strings('kicking', message))
                try:
                    await message.client.kick_participant(message.chat_id, user.id)
                except UserAdminInvalidError:
                    return await utils.answer(message, self.strings('no_rights', message))
                if not reason:
                    return await utils.answer(message, self.strings('kicked', message).format(user.first_name))
                if reason:
                    return await utils.answer(message, self.strings('kicked_for_reason', message).format(user.first_name, reason))
                
                return await utils.answer(message, self.strings('kicked', message).format(user.first_name))
            except ValueError:
                return await utils.answer(message, self.strings('no_args', message))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def bancmd(self, message):
        """.ban {—Ä–µ–ø–ª–∞–π} - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_private:
            try:
                args = utils.get_args_raw(message).split(' ')
                reason = utils.get_args_raw(message)
                reply = await message.get_reply_message()
                
                chat = await message.get_chat()
                if not chat.admin_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                else:
                    if chat.admin_rights.ban_users == False:
                        return await utils.answer(message, self.strings('no_rights', message))
                
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                    args = utils.get_args_raw(message)
                    if args:
                        reason = args
                else:
                    user = await message.client.get_entity(args[0] if not args[0].isnumeric() else int(args[0]))
                    if args:
                        if len(args) == 1:
                            args = utils.get_args_raw(message)
                            user = await message.client.get_entity(args if not args.isnumeric() else int(args))
                            reason = False
                        elif len(args) >= 2:
                            reason = utils.get_args_raw(message).split(' ', 1)[1]
                try:
                    await utils.answer(message, self.strings('banning', message))
                    await message.client(EditBannedRequest(message.chat_id, user.id, ChatBannedRights(until_date=None, view_messages=True)))
                except UserAdminInvalidError:
                    return await utils.answer(message, self.strings('no_rights', message))
                if not reason:
                    return await utils.answer(message, self.strings('banned', message).format(user.first_name))
                if reason:
                    return await utils.answer(message, self.strings('banned_for_reason', message).format(user.first_name, reason))
                return await utils.answer(message, self.strings('banned', message).format(user.first_name))
            except ValueError:
                return await utils.answer(message, self.strings('no_args', message))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def unbancmd(self, message):
        """.unban {—Ä–µ–ø–ª–∞–π} - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_private:
            try:
                reply = await message.get_reply_message() 
                
                chat = await message.get_chat()
                if not chat.admin_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                else:
                    if chat.admin_rights.ban_users == False:
                        return await utils.answer(message, self.strings('no_rights', message))
                
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    args = utils.get_args_raw(message)
                    if not args:
                        return await utils.answer(message, self.strings('unban_none', message))
                    user = await message.client.get_entity(args if not args.isnumeric() else int(args))
                await message.client(EditBannedRequest(message.chat_id, user.id, ChatBannedRights(until_date=None, view_messages=False)))
                
                return await utils.answer(message, self.strings('unbanned', message).format(user.first_name))
            except ValueError:
                return await utils.answer(message, self.strings('no_args', message))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def mutecmd(self, message):
        """.mute {—Ä–µ–ø–ª–∞–π} {–≤—Ä–µ–º—è; –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—ã–¥–∞—Å—Ç –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π} - –º—å—é—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_private:
            args = utils.get_args_raw(message).split()
            reply = await message.get_reply_message()
            timee = False

            try:
                if reply:
                        user = await message.client.get_entity(reply.sender_id)
                        args = utils.get_args_raw(message)
                        if args:
                            timee = args
                else:
                    user = await message.client.get_entity(args[0] if not args[0].isnumeric() else int(args[0]))
                    if args:
                        if len(args) == 1:
                            args = utils.get_args_raw(message)
                            user = await message.client.get_entity(args if not args.isnumeric() else int(args))
                            timee = False
                        elif len(args) >= 2:
                            timee = utils.get_args_raw(message).split(' ', 1)[1]
            except ValueError:
                return await utils.answer(message, self.strings('no_args', message))

            if timee:
                n = ''
                t = ''

                for _ in timee:
                    if _.isdigit():
                        n += _
                    else:
                        t += _

                text = f"<b>{n}"

                if t == "m":
                    n = int(n) * 60
                    text += " –º–∏–Ω.</b>"
                
                elif t == "h":
                    n = int(n) * 3600
                    text += " —á–∞—Å.</b>"

                elif t == "d":
                    n = int(n) * 86400
                    text += " –¥–Ω.</b>"
                
                else:
                    return await utils.answer(message, self.strings('no_args', message))

                try:
                    tm = ChatBannedRights(until_date=time.time() + int(n), send_messages=True)
                    await message.client(EditBannedRequest(message.chat_id, user.id, tm))
                    return await utils.answer(message, self.strings('muted', message).format(user.first_name) + text)
                except UserAdminInvalidError:
                    return await utils.answer(message, self.strings('no_rights', message))                
            else:
                try:
                    tm = ChatBannedRights(until_date=True, send_messages=True)
                    await message.client(EditBannedRequest(message.chat_id, user.id, tm))
                    return await message.edit('<b>{} —Ç–µ–ø–µ—Ä—å –≤ –º—É—Ç–µ.</b>'.format(user.first_name))
                except UserAdminInvalidError:
                    return await utils.answer(message, self.strings('no_rights', message))
        else:
            await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def unmutecmd(self, message):
        """.unmute {—Ä–µ–ø–ª–∞–π} - –∞–Ω–º—å—é—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_private:
            try:
                reply = await message.get_reply_message() 
                
                chat = await message.get_chat()
                if not chat.admin_rights and not chat.creator:
                    return await utils.answer(message, self.strings('not_admin', message))
                else:
                    if chat.admin_rights.ban_users == False:
                        return await utils.answer(message, self.strings('no_rights', message))
                
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    args = utils.get_args_raw(message)
                    if not args:
                        return await utils.answer(message, self.strings('unmute_none', message))
                    user = await message.client.get_entity(args if not args.isnumeric() else int(args))
                await message.client(EditBannedRequest(message.chat_id, user.id, UNMUTE_RIGHTS))
                
                return await utils.answer(message, self.strings('unmuted', message).format(user.first_name))
            except ValueError:
                return await utils.answer(message, self.strings('no_args', message))
        else:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))


    async def delallmsgscmd(self, message):
        """.delallmsgs {—Ä–µ–ø–ª–∞–π} - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_private:
            chat = await message.get_chat()
            if not chat.admin_rights and not chat.creator:
                return await message.edit("<b>‚ùå –ò–¥–∏ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–∞—Ç—å –∞–¥–º–∏–Ω–∫—É. –£ —Ç–µ–±—è –µ–µ –∑–¥–µ—Å—å –Ω–µ—Ç.</b>")
            else:
                if chat.admin_rights.delete_messages == False:
                    return await message.edit("<b>‚ùå –ò–¥–∏ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–∞—Ç—å –∞–¥–º–∏–Ω–∫—É. –£ —Ç–µ–±—è –µ–µ –∑–¥–µ—Å—å –Ω–µ—Ç.</b>")

        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if not args and not reply:
            return await utils.answer(message, self.strings('no_args_or_reply', message))

        await utils.answer(message, self.strings('deleting', message))

        if args:
            user = await message.client.get_entity(args)
        if reply:
            user = await message.client.get_entity(reply.sender_id)

        await message.client(DeleteUserHistoryRequest(message.to_id, user.id))
        await message.client.send_message(message.to_id, self.strings('deleted', message).format(user.first_name))
        await message.delete() 


    async def deluserscmd(self, message):
        """.delusers {clean; –Ω–∏—á–µ–≥–æ} - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã clean - –∫–∏–∫–Ω–µ—Ç –∏—Ö –∏–∑ —á–∞—Ç–∞"""
        if message.is_private:
            return await utils.answer(message, self.strings('this_isn`t_a_chat', message))

        con = utils.get_args_raw(message)
        del_u = 0
        del_status = '<b>—É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>'

        if con != "clean":
            await utils.answer(message, self.strings('del_u_search', message))
            async for user in message.client.iter_participants(message.chat_id):
                if user.deleted:
                    del_u += 1
            if del_u == 1:
                del_status = f"<b>–ù–∞–π–¥–µ–Ω {del_u} —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —á–∞—Ç–µ, –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é </b><code>.delusers clean</code><b>.</b>"
            if del_u > 0:
                del_status = f"<b>–ù–∞–π–¥–µ–Ω–æ {del_u} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —á–∞—Ç–µ, –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é </b><code>.delusers clean</code><b>.</b>"
            return await message.edit(del_status)

        chat = await message.get_chat()
        if not chat.admin_rights and not chat.creator:
            return await utils.answer(message, self.strings('not_admin', message))
        else:
            if chat.admin_rights.ban_users == False:
                return await utils.answer(message, self.strings('no_rights', message))

        await utils.answer(message, self.strings('del_u_kicking', message))
        del_u = 0
        del_a = 0
        async for user in message.client.iter_participants(message.chat_id):
            if user.deleted:
                try:
                    await message.client(EditBannedRequest(message.chat_id, user.id, BANNED_RIGHTS))
                except UserAdminInvalidError:
                    del_u -= 1
                    del_a += 1
                await message.client(EditBannedRequest(message.chat_id, user.id, UNBAN_RIGHTS))
                del_u += 1
        if del_u == 1:
            del_status = f"<b>‚úÖ –ö–∏–∫–Ω—É—Ç {del_u} —É–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.</b>"
        if del_u > 0:
            del_status = f"<b>‚úÖ –ö–∏–∫–Ω—É—Ç–æ {del_u} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</b>"

        if del_a == 1:
            del_status = f"<b>‚úÖ –ö–∏–∫–Ω—É—Ç {del_u} —É–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n" \
                            f"‚ùå {del_a} —É–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∞ –Ω–µ –∫–∏–∫–Ω—É—Ç.</b>"
        if del_a > 0:
            del_status = f"<b>‚úÖ –ö–∏–∫–Ω—É—Ç–æ {del_u} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n" \
                            f"‚ùå {del_a} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –∫–∏–∫–Ω—É—Ç—ã.</b>"
        await message.edit(del_status)


def resizepic(reply):
    im = Image.open(io.BytesIO(reply))
    w, h = im.size
    x = min(w, h)
    x_ = (w-x)//2
    y_ = (h-x)//2
    _x = x_ + x
    _y = y_ + x
    im = im.crop(( x_, y_, _x, _y ))
    out = io.BytesIO()
    out.name = "outsuder.png"
    im.save(out)
    return out.getvalue()

async def check_media(message, reply):
    if reply and reply.media:
        if reply.photo:
            data = reply.photo
        elif reply.video:
            data = reply.video
        elif reply.document:
            if reply.gif or reply.audio or reply.voice:
                return None
            data = reply.media.document
        else:
            return None
    else:
        return None
    if not data or data is None:
        return None
    else:
        data = await message.client.download_file(data, bytes)
        try:
            Image.open(io.BytesIO(data))
            return data
        except:
            return None

    async def addcmd(self, message: Message):
        """.add {reply; id; @} - –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞. –î–æ–±–∞–≤—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã list —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–±–∞–Ω–∞"""
        users = self.db.get("RakenAdminMod", "users", [])
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        if not (args or reply):
            return await message.edit("<i>‚ùå –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è. –ß–∏—Ç–∞–π</i> <code>.help fyAdminMod </code>")

        if args == "list":
            if not users:
                return await message.edit("<i>  –°–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞ –ø—É—Å—Ç.\n –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π</i> <code>.add</code> <i>—Ä–µ–ø–ª–∞–µ–º –Ω–∞ –Ω–µ–≥–æ. </i>")

            msg = ""
            for _ in users:
                try:
                    user = await self.client.get_entity(_)
                    msg += f"‚Ä¢ <a href=\"tg://user?id={user.id}\">{user.first_name}</a>\n"
                except:
                    users.remove(_)
                    self.db.set("RakenAdminMod", "users", users)
                    return await message.edit(" ‚ùå <i>–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏ –∫–æ–º–∞–Ω–¥—É</i>")

            return await message.edit(f" <i> –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–≤—Ç–æ–±–∞–Ω–µ:</i>\n\n{msg}")

        try:
            user = await self.client.get_entity(reply.sender_id if reply else args if not args.isnumeric() else int(args))
        except ValueError:
            return await message.edit("<i> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>")

        if user.id not in users:
            users.append(user.id)
            text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è"
            text2 = "‚úÖ"
        else:
            users.remove(user.id)
            text = "—É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è"
            text2 = "‚úÖ"

        self.db.set("RakenAdminMod", "users", users)
        await message.edit(f" {text2} {user.first_name} –±—ã–ª {text} –∞–≤—Ç–æ–±–∞–Ω–∞")


    async def achatcmd(self, message: Message):
        """.achat - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞. –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç, —á–∞—Ç —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞. –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã lict, –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞"""
        chats = self.db.get("RakenAminMod", "chats", [])
        args = utils.get_args_raw(message)
        chat_id = message.chat_id

        if args == "list":
            if not chats:
                return await message.edit("<i>  –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞ –ø—É—Å—Ç.\n –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–≥–æ —á–∞—Ç: </i> <code>.achat </code>")

            msg = ""
            for _ in chats:
                try:
                    chat = await self.client.get_entity(_)
                    msg += f"‚Ä¢ {chat.title} | {chat.id}\n"
                except:
                    chats.remove(_)
                    self.db.set("RakenAdminMod", "users", chats)
                    return await message.edit(" ‚ùå <i>–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏ –∫–æ–º–∞–Ω–¥—É</i>")

            return await message.edit(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞:\n\n{msg}")

        if message.is_private:
            return await message.edit("‚ùå –≠—Ç–æ –Ω–µ —á–∞—Ç!")

        if chat_id not in chats:
            chats.append(chat_id)
            text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫"
            text2 = "‚úÖ"
        else:
            chats.remove(chat_id)
            text = "—É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
            text2 = "‚úÖ"

        self.db.set("RakenAdminMod", "chats", chats)
        return await message.edit(f" {text2} –≠—Ç–æ—Ç —á–∞—Ç {text} —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–∞")


    async def watcher(self, message: Message):
        try:
            users = self.db.get("RakenAdminMod", "users", [])
            chats = self.db.get("RakenAdminMod", "chats", [])
            user = message.sender
            chat_id = message.chat_id

            if chat_id not in chats:
                return

            if user.id in users:
                for _ in chats:
                    try:
                        await self.client(
                            EditBannedRequest(
                                _, user.id, ChatBannedRights(
                                    until_date=None, view_messages=True
                                )
                            )
                        )
                    except: pass
                return await message.respond(f" ‚úÖ {user.first_name}<i> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É</i> <code>.add (—é–∑–µ—Ä–Ω–µ–π–º)</code>")
        except:
            pass

    strings = {"reply_start": "<b>‚ùå–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≥–¥–µ –Ω–∞—á–∞—Ç—å.</b>",
               "invalid_chat": "<b>‚ùå–≠—Ç–æ –Ω–µ —á–∞—Ç.</b>",
               "needs_admin": "<b>‚ùå –ò–¥–∏ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–∞—Ç—å –∞–¥–º–∏–Ω–∫—É. –£ —Ç–µ–±—è –µ–µ –∑–¥–µ—Å—å –Ω–µ—Ç.</b>",
               "recovered": "‚úÖ–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í–ø–µ—Ä–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º {}, —É–¥–∞–ª–µ–Ω–æ {} —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º {}"}

    @loader.group_admin
    @loader.ratelimit
    async def recoverdeletedcmd(self, message):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—è–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        msgs = message.client.iter_admin_log(message.to_id, delete=True)
        if not message.is_reply:
            await utils.answer(message, self.strings("reply_start", message))
            return
        if not isinstance(message.to_id, telethon.tl.types.PeerChannel):
            await utils.answer(message, self.strings("invalid_chat", message))
            return
        target = (await message.get_reply_message()).date
        ret = []
        try:
            async for msg in msgs:
                if msg.original.date < target:
                    break
                if msg.original.action.message.date < target:
                    continue
                ret += [msg]
        except telethon.errors.rpcerrorlist.ChatAdminRequiredError:
            await utils.answer(message, self.strings("needs_admin", message))
        args = utils.get_args(message)
        if len(args) > 0:
            try:
                count = int(args[0])
                ret = ret[-count:]
            except ValueError:
                pass
        for msg in reversed(ret):
            orig = msg.original.action.message
            deldate = msg.original.date.isoformat()
            origdate = orig.date.isoformat()
            await message.respond(self.strings("recovered", message).format(msg.id, origdate, orig.from_id,
                                                                            deldate, msg.user_id))
            if isinstance(orig, telethon.tl.types.MessageService):
                await message.respond("<b>" + utils.escape_html(orig.stringify()) + "</b>")
            else:
                await message.respond(orig)
